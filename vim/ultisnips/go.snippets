global !p
def receivers():
	""" Returns a list of unique receivers used in this file
	"""
	receivers = set()
	r = re.compile('\s*func\s*\(([^)]+)\)\s*\w+\s*\(')
	for i, line in enumerate(vim.current.buffer):
		m = r.match(line)
		if m != None:
			receivers.add(m.group(1))
	return receivers
endglobal

snippet fn "func"
func ${1/(.+)/(/}${1:RECEIVER}${1/(.+)/) /}${2:NAME}(${3:PARAMS})${4/(.+)/ /}${4/([^(]*,.*)|.*/(?1:\()/}${4:RETURN}${4/([^(]*,.*)|.*/(?1:\))/} {
	${0:${VISUAL}}
}
endsnippet

snippet fnc "func with context"
func ${1/(.+)/(/}${1:RECEIVER}${1/(.+)/) /}${2:NAME}(ctx context.Context${3/.+/, /}${3:PARAMS})${4/(.+)/ /}${4/([^(]*,.*)|.*/(?1:\()/}${4:RETURN}${4/([^(]*,.*)|.*/(?1:\))/} {
	${0:${VISUAL}}
}
endsnippet

snippet func "" A
use-fn-snippet
endsnippet

snippet err "error handling"
if err != nil {
	return ${0}err
}
endsnippet

snippet for "for-range loop"
for ${1:_}${2/(.+)/, /}${2:_} := range ${3:LIST} {
Â  ${0:${VISUAL}}
}
endsnippet
